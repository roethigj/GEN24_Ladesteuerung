[env]
; ForecastCalcMethod ist die Berechnungsmethode für die Prognose aus den Forecastwerten.
; Der mit ForecastCalcMethod berechnete Wert wird bei jeder Prognoseanforderung in die DB neu geschrieben,
; für alle gespeicherten Werte, auch die historischen.
; Gültige Werte: median | mittel | min | max
; Mit einem angehängten Plus kann der Wert jeder Methode mit gespeicherten Produktionsdaten optimiert werden.
; Gültige Werte: median+ | mittel+ | min+ | max+
ForecastCalcMethod = median

[pv.strings]
; Für akkudoktor und openmeteo können hier mehrere Strings mit anderer Ausrichtung definiert werden,
; hier Anzahl eintragen, und die Daten der weiteren Strings analog zum 2. String eintragen
; forecast.solar kann aktuell nur 2 Strings verarbeiten
anzahl = 1
; lat und lon sind die Positionsdaten der Anlage bzw. des Strings. Nutze https://www.suncalc.org/ oder andere Tools zur Identifikation
lat = 44.444
lon = 11.111
; wp ist die Modulleistung des Strings in W
wp = 5550
; az ist der Azimuth der Anlage, also in welche Himmelsrichtung die Module ausgerichtet sind. -180 und 180 = Norden, -90 = Osten, 0 = Süden, 90 = Westen
az = 0
; dec ist der Winkel, in dem die Module verbaut sind, wobei 0 waagerecht liegen und 90 senkrecht stehend bedeutet
dec = 30
; horizon gibt mögliche Verschattungen pro String an, benutzt Akkudoktor und Forecast_solar mit api_key
; die 12 Zahlen werden in Grad angegeben und repräsentieren im Uhrzeigersinn in 30 Grad Schritten, beginnen bei Nord, den Horizont
; siehe https://doc.forecast.solar/horizon
; wenn zum Beispiel im Südwesten ein großer Baum Schatten wirft:
; 0,0,0,0,0,0,0,20,45,20,0,0
horizon = 0,0,0,0,0,0,0,0,0,0,0,0
; wenn es einen 2. String gibt, dann hier die Werte analog zum ersten Anpassen:
wp2 = 4440
az2 = 0
dec2 = 10
horizon2 = 0,10,10,10,30,30,0,0,10,10,10,0


[forecast.solar]
; Wenn api_key nicht "kein" ist, wird er für die Prognoseabfrage verwendet.
api_key = kein
; wenn ein API key vorhanden ist, können die Forecasts mit aktuellen Ertragswerten des Tages (aus der DB) verbessert werden.
; "ja" nutzt diese Funktion der API, "nein" nicht.
; Siehe https://doc.forecast.solar/actual
forecastactual = nein
; wenn "damping" eingesetzt werden soll, hier die entsprechenden Werte einstellen. "0,0" ist Standardwert (kein Damping)
; 0,0 bedeutet kein Damping, 0.25,0.75 bedeutet etwas damping am Morgen, hohes Damping am Nachmittag.
; beide Werte müssen zwischen 0 und 1 sein
; Siehe https://doc.forecast.solar/damping
forecastdamping = 0,0
; Wenn ein api_pers_plus vorhanden ist (api_pers_plus = ja) können zwei Ausrichtungen in einer Abfrage behandelt werden.
api_pers_plus = nein
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes (je größer der Wert, umso größer das Gewicht)
Gewicht = 1

[akkudoktor]
; spezifische Werte für die API von Andreas Schmitz, dem Akkudoktor https://www.youtube.com/@Akkudoktor
; weitere Infos unter https://api.akkudoktor.net/
; der Zellkoeffizient wird für die Berechnung der Verluste im Kontext herrschender Temperaturen genutzt
cellco = -0.4
; albedo ist der Reflexionsgrad des Untergrunds, auf dem die Zellen montiert sind. Siehe https://pv-navi.de/pv-navi-abc/albedo/
albedo = 0.2
; Gesamtleistung des Wechselrichters
powerInverter = 8000
; Effizienz des Wechselrichter
inverterEfficiency = 1
; spezifische Werte für eventuellen 2. String:
cellco2 = -0.4
albedo2 = 0.2
powerInverter2 = 8000
inverterEfficiency2 = 1
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes (je größer der Wert, umso größer das Gewicht)
Gewicht = 1

[solarprognose]
; Hier die Werte eintragen, wenn die Prognose mit Solarprognose_WeatherData.py von http://www.solarprognose.de geholt werden soll
accesstoken = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
item = inverter
id = 1111
type = hourly
; der Zeitversatz verschiebt die Prognose um X Stunden nach vor (-) oder nach hinten.
Zeitversatz = 0
; Sekunden des sleep = Vorgabe von solarprognose.de
WaitSec = 21
; mögliche Werte mosmix|own-v1|clearsky, für mosmix muss dem Standort eine Mosmix Station zugeordnet sein.
; Karte mit Stationen: https://wettwarn.de/mosmix/mosmix.html
algorithm = own-v1
; falls die Anlagengröße in KWp nicht mit der Größe in Solarprognose übereinstimmt (z.B. Erweiterung)
KW_Faktor = 1.00
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes (je größer der Wert, umso größer das Gewicht)
Gewicht = 1

[solcast.com]
; Hier die Werte eintragen, wenn die Prognose mit Solcast_WeatherData.py von https://api.solcast.com.au geholt werden soll
api_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
resource_id = xxxx-xxxx-xxxx-xxxx
; Zeitversatz zu UTC, hier für Zeitzone Europe/Berlin UTC +1, Sommerzeit = +1 erfolgt nun automatisch.
Zeitzone = +1
KW_Faktor = 1.00
; spezifische Werte für eventuellen 2. String:
resource_id2 = xxxx-xxxx-xxxx-xxxx
KW_Faktor2 = 1.00
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes ( je Größer der Wert umso größer das Gewicht)
Gewicht = 1

[openmeteo]
; Infos zur API siehe https://open-meteo.com/en/docs
; Wenn die Prognosekurve zur Produktionskurve generell verschoben ist, kann sie hiermit um X Minuten verschoben werden
offset_minuten = 0
; Faktor des zusätzlichen Bewölkungseinflusses
; 0 = kein Einfluss => 1.0 starker Einfluss
cloudEffect = 0
; Basis-Effizienzfaktor (systemische Verluste, nicht-optimale Bedingungen)
base_efficiency_factor = 0.90
; Getestete Wettermodelle, Programm überprüft auf dies Modelle
; Liste kann erweitert werden
valid_models = {'icon_d2','icon_eu','ecmwf_aifs025_single'}
; Verwendetes Wettermodel, es können  auch mehrere angegeben werden, der Werte dann gemittelt werden.
; z.B. icon_d2,icon_eu
weather_models = icon_d2
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes (je größer der Wert, umso größer das Gewicht)
Gewicht = 1

[solcast_ha]
; Konfiguration für ADDONS/Solcast_WeatherData_from_HA_file.py von @roethigj
; Beschreibung siehe ADDONS/Solcast_WeatherData_from_HA_file.readme
; Hier den Pfad eintragen, wo die solecast.json vom HA Addon liegt
; (z.B. /usr/share/hassio/homeassistant/solcast.json)
HA_weatherfile = /usr/share/hassio/homeassistant/solcast.json
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes ( je Größer der Wert umso größer das Gewicht)
; Zeitversatz zu UTC, hier für Zeitzone Europe/Berlin UTC +1, Sommerzeit = +1 erfolgt nun automatisch.
Zeitzone = +1
KW_Faktor = 1.00
; Gewicht ermöglicht eine höhere Gewichtung des Wetterdienstes (je größer der Wert, umso größer das Gewicht)
Gewicht = 1

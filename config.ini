# Genauere Erklärungen siehe config.info
[env]
filePathWeatherData = weatherData.json

# Wenn ein zweites Feld mit anderer Ausrichtung vorhanden ist, hier Anzahl=2 eintragen
# und die Werte unter [forecast.solar2] eintragen
[pv.strings]
anzahl = 1

[forecast.solar]
lat = 44.444
lon = 11.111
dec = 30
az = 0
kwp = 11.4
dataAgeMaxInMinutes = 10000

[forecast.solar2]
lat = 11.111
lon = 6.666
dec = 22
az = 135
kwp = 4.44

[solarprognose]
# Hier die Werte eintragen, wenn die Prognose mit Solarprognose_WeatherData.py von http://www.solarprognose.de geholt werden soll
weatherfile = weatherData.json
accesstoken = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
item = inverter
id = 1111
type = hourly
dataAgeMaxInMinutes = 10000
# Sekunden des sleep = Vorgabe von solarprognose.de
WaitSec = 21
# mögliche Werte mosmix|own-v1|clearsky
algorithm = mosmix
# falls die Anlagengröße in KWp nicht mit der Größe in Solarprognose übereinstimmt (z.B. Erweiterung)
KW_Faktor = 1.00

[solcast.com]
# Hier die Werte eintragen, wenn die Prognose mit Solcast_WeatherData.py von https://api.solcast.com.au geholt werden soll
weatherfile = weatherData.json
api_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
resource_id = xxxx-xxxx-xxxx-xxxx
dataAgeMaxInMinutes = 100
# Zeitversatz zu UTC, hier für Zeitzone Europe/Berlin UTC +1, Sommerzeit = +1 erfolgt nun automatisch.
Zeitzone = +1
KW_Faktor = 1.00

[gen24]
# IP Wechselrichter
hostNameOrIp = 192.168.178.50
port = 502

[Ladeberechnung]
# Wenn die Variable "FesteLadeleistung" größer "0" Watt ist, wird der Wert geschrieben.
FesteLadeleistung = 0

# Bis wann (Stunde) soll die Batterie voll sein,
BattVollUm = 14
# Faktor um Batteriekapazität für später aufzusparen.
# Der aus der Prognose errechnete Batterieladewert wird durch den BatSparFaktor geteilt.
# Frühjahr/Sommerwert ca.
#BatSparFaktor = 0.3
# Herbst/Winterwert ca.
#BatSparFaktor = 3.0
BatSparFaktor = 3.0

# print_level 0=keine Ausgabe 1=Ausgabe 2=DEBUG Ausgabe
print_level = 1
# Groester Batterieladewert, der im WR gesetzt werden soll, aber höchstens der maximale mögliche Ladewert!!!
MaxLadung = 5000
# die Einspeisegrenze sollte etwas unterhalb der wirklichen Grenze liegen (1-2%).
Einspeisegrenze = 7900
# AC Kapazität des Wechselrichters um den Überschuss in die Batterie zu laden (etwas darunter bleiben 1-2%)
WR_Kapazitaet = 10000

# PV-Leistung reellen Spitzenwert
PV_Leistung_Watt = 11400

# Grundlast wird verwendet um den Wert "aktuellerUeberschuss" zu berechnen
Grundlast = 0
# Grundlast je nach Wochentag wird gesetzt, wenn Grundlast == 0
# Wochentage  = Mo,  Die, Mi,  Do,  Fr,  Sa,   So
Grundlast_WoT = 900, 900, 900, 900, 900, 1400, 1800

# Schaltverzögerung um Schreibzugriffe auf WR zu minimieren
WRSchreibGrenze_nachOben = 500
WRSchreibGrenze_nachUnten = 1700

# Liegt der Batteriestatus unter MindBattLad in % wird voll geladen
MindBattLad = 40
# Wenn Ladung ausgeschaltet den Wert LadungAus in Watt setzen (z.B. 0 oder 10 )
LadungAus = 0

[Reservierung]
# Reservierungsdateiname
PV_ReservieungsDatei = Watt_Reservierung.json
# Hier kann die PV-Reserierung (z.B. für ein E-Auto nachmittags) eingeschaltet werden (1=ein, 0=aus)
PV_Reservierung_steuern = 1

[Entladung]
# Konfigdatei für die Entladesteuerung
Akku_EntladeSteuerungsFile = Akku_EntLadeSteuerFile.json
# Batterieentladung ein- bzw. ausschalten (1=ein)
Batterieentlandung_steuern = 1
# Damit nicht so häufig auf dem WR geschrieben wird nur bei Abweichung größer WRSchreibGrenze_Watt schreiben
WREntladeSchreibGrenze_Watt = 200

[messaging]
# Hier Daten für Pushmessage auf Handy
# Push_Message_EIN (1=EIN/0=AUS)
Push_Message_EIN = 0
Push_Message_Url = https://ntfy.sh/XXXXXXXXX

[Logging]
# durch Logging ein werden die Werte in eine CSV Datei zur Auswertung geschrieben (1=ein, 0=aus)
Logging_ein = 0
Logging_file = PV_Daten
# Logging_type ist "csv" oder "sqlite"
Logging_type = sqlite

[Fallback]
# Ab hier Konfiguration der Fallbackfunktion
# Werte 0, 1 oder 2
Fallback_on = 0
# Fallbackzeit = (Fallback_Zeitabstand_Std * 3600 + Cronjob_Minutenabstand *60 *0.9)
Fallback_Zeitabstand_Std = 5
Cronjob_Minutenabstand = 5

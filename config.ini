[env]
filePathWeatherData=weatherData.json

# Wenn ein zweites Feld mit anderer Ausrichtung vorhanden ist, hier anzahl=2 eintragen
# und die Werte unter [forecast.solar2] eintragen
[pv.strings]
anzahl=1

[forecast.solar]
lat=44.444
lon=11.111
dec=30
az=0
kwp=11.4
# Nur alle dataAgeMaxInMinutes kann eine neu Prognose angefordert werden.
# bei mir 1000 da nur Backup zu forecast.solar2, ansonsten sollte sie irgendwo bei 70 Minuten sein
dataAgeMaxInMinutes=1000

[forecast.solar2]
lat=11.111
lon=6.666
dec=22
az=135
kwp=4.44

# Hier die Werte eintragen, wenn die Prognosse mit Solarprognose_WeatherData.py von http://www.solarprognose.de geholt werden soll
# hier ist eine Registrierung auf http://www.solarprognose.de erforderlich
[solarprognose]
weatherfile = weatherData.json
accesstoken = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
item = inverter
id = 1111
type = hourly
dataAgeMaxInMinutes = 100
# Sekunden des sleep = Vorgabe von solarprognose.de
WaitSec = 21
# mögliche Werte mosmix|own-v1|clearsky
algorithm=own-v1

[gen24]
# IP Wechselrichter
hostNameOrIp=192.168.178.50
port=502

[Ladeberechnung]
# Wenn die Variable "FesteLadeleistung" größer "0" ist, wird der Wert fest als Ladeleistung in Watt geschrieben.
FesteLadeleistung = 0

# Bis wann (Stunde) soll die Batterie voll sein, 
# wenn sie nicht durch zu viel Überschuss bereits früher voll ist
BattVollUm = 17
# Faktor um Batteriekapazitaet fuer spaeter zu sparen
# der aus der Prognose errechnete Batterieladewert wird durch die Differenz BattVollUm * BatSparFaktor geteilt. 
# Dadurch wird Batteriekappazitaet für spaeter reserviert
# bei BatSparFaktor = 0 wird der nach Prognose errechnete Ladewert NICHT reduziert
BatSparFaktor = 1.2

# Ausgabe von Werten steuern
# print_level 1=Ausgabe 0=keine Ausgabe
print_level = 1
# Groester Batterieladewert, der im WR gestezt werden soll
MaxLadung = 3000
# Maximalwert, den die Kappung erreichen soll
MaxKapp = 3000
# die Einspeisegrenze bzw. WR_Kapazitaet sollte ein wenig unterhalb der wirklichen Grenze liegen,
# da sonst der Wechselrichter bereits abregelt, bevor das Programm die Überproduktion erkennt (bei mir ca 5%)
Einspeisegrenze = 7900
WR_Kapazitaet = 9800

# Grundlast wird verwendet um den aktuellerUeberschuss zu berechnen
# Grundlast ist 300W + 100W Mindesteinspeisung
Grundlast = 500
# Schaltverzögerung
# Ab welchem Unterschied in Watt soll der neue Ladewert auf dem Wechselrichter geschrieben werden
# Damit nicht zu häufige Schreibvorgaenge auf dem Wechselrichter erfolgen, habe ich den Wert WRSchreibGrenze_nachUnten groesser gesetzt
# Damit wird nicht jede kleine Schwankung nach unten auf den WR geschrieben, und abends wenn die Produktion zurueckgeht
# ist die Batterie eh voll und der Ladewert ganz auf
WRSchreibGrenze_nachOben = 321
WRSchreibGrenze_nachUnten = 1289

# Liegt der Batteriestatus unter MindBattLad in % wird voll geladen
MindBattLad = 20
# Wenn Batterie voll in % dann volle Ladung
BatterieVoll = 95

[Fallback]
# Ab hier Konfiguration der Fallbackfunktion
# Fallback_on = 0 ganz ausgeschaltet, KEINE Prüfung ob eine Fallbackzeit geschieben ist
# Fallback_on = 1 ausgeschaltet, Prüfung ob eine Fallbackzeit geschieben ist, evtl. auf 0 setzen
# Fallback_on = 2 eingeschaltet
# War Fallback bereits aktiv erst mit Fallback_on = 1 Fallbackzeit auf 0 setzen lassen und dann auf Fallback_on = 0 gehen
Fallback_on = 0
# Fallbackzeit = (Fallback_Zeitabstand_Std * 3600 + Cronjob_Minutenabstand *60 *0.9)
Fallback_Zeitabstand_Std = 5
Cronjob_Minutenabstand = 5
